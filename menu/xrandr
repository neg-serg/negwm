#!/usr/bin/env python
import subprocess
import logging
from typing import List

from negwm.lib.display import Display

class menu():
    @staticmethod
    def args(P: dict, prompt='❯>', matching='fuzzy') -> List[str]:
        """ Create run parameters to spawn menu process from dict
            P(dict): parameters for menu
            List(str) to do menu subprocessing """
        return [
            'rofi', 
            '-show',
            '-dmenu',
            '-disable-history',
            P.get('auto-select', '-no-auto-select'),
            P.get('markup_rows', '-no-markup-rows'),
            P.get('matching', '-no-markup-rows'),
            '-p', P.get('prompt', prompt),
            '-i',
            '-matching', f'{matching}'
        ]

    @staticmethod
    def wrap_str(s: str, lfs='⟬', rhs='⟭') -> str:
        """ String wrapper to make it beautiful """
        return f'{lfs}{s}{rhs}'

class xrandr():
    def __init__(self) -> None:
        self.prompt='❯>'

    def xrandr(self):
        ret = ''
        xrandr_data = Display.xrandr_resolution_list()
        menu_params = {'prompt': f'{menu.wrap_str("gtk_theme")} {self.prompt}'}
        resolution_sel = subprocess.run(
            menu.args(menu_params),
            stdout=subprocess.PIPE,
            input=bytes('\n'.join(xrandr_data), 'UTF-8'),
            check=False
        ).stdout
        if resolution_sel is not None:
            ret = resolution_sel.decode('UTF-8').strip()
        ret_list = []
        size_id = 0
        if ret and 'x' in ret:
            size_pair = ret.split(':')
            size_id = size_pair[0]
            res_str = size_pair[1:][0].strip()
            ret_list = res_str.split('x')
        width, height = ret_list[0].strip(), ret_list[1].strip()
        logging.info(f'Set size to {width}x{height}')
        Display.set_screen_size(int(size_id))

if __name__ == '__main__':
    xrandr().xrandr()
